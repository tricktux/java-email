/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.molina.emails;

import java.io.File;
import org.ini4j.*;

import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class Email {
  private String from;
  private String host;
  private String port;
  private String username;
  private String password;
  private int ssl;
  private int tls;

  final static Log logger = LogFactory.getLog(Email.class);

  private boolean isValidEmailAddress(String email) {
    boolean result = true;
    try {
      InternetAddress emailAddr = new InternetAddress(email);
      emailAddr.validate();
    } catch (AddressException ex) {
      result = false;
    }
    return result;
  }

  public boolean sendEmail(String to, String subject, String content) {
    try {
      if (isValidEmailAddress(to)) {
        logger.error("Invalid to email address provided");
        return false;
      }

			if ((to == null) || (to.isEmpty())) {
				logger.error("Invalid from email address");
				return false;
			}

      Properties properties = createProps();
      if (properties == null) {
        logger.error("Failed to set system properties");
				return false;
      }

      Session session = createSession(properties);
			if (session == null) {
				logger.error("Failed to set email session");
				return false;
			}

      // Create a default MimeMessage object.
      MimeMessage message = new MimeMessage(session);

      // Set From: header field of the header.
      message.setFrom(new InternetAddress(from));

      // Set To: header field of the header.
      message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

      // Set Subject: header field
      message.setSubject(subject);

      // Now set the actual message
      message.setText(content);

      // Send message
      Transport.send(message);
      return true;
    } catch (MessagingException mex) {
      logger.trace("Exception sending email");
      mex.printStackTrace();
      return false;
    }
  }

  private Properties createProps() {
    Properties props = new Properties(System.getProperties());

    // Setup mail server
    props.setProperty("mail.smtp.auth", "true");
    if (tls > 0)
      props.setProperty("mail.smtp.starttls.enable", "true");
    props.setProperty("mail.smtp.host", host);
    props.setProperty("mail.smtp.port", port);
    if (ssl > 0) {
      props.setProperty("mail.smtp.socketFactory.port", port);
      props.setProperty("mail.smtp.socketFactory.class",
                        "javax.net.ssl.SSLSocketFactory");
    }

    return props;
  }

  private Session createSession(Properties properties) {
    if (properties == null) {
      return null;
    }

    return Session.getDefaultInstance(properties,
    new javax.mail.Authenticator() {
      protected PasswordAuthentication getPasswordAuthentication() {
        return new PasswordAuthentication(
                 username, password);
      }
    });
  }


  /**
   * Get from.
   *
   * @return from as String.
   */
  public String getFrom() {
    return from;
  }

  /**
   * Set from.
   *
   * @param from the value to set.
   */
  public void setFrom(String from) {
		if (!isValidEmailAddress(from)) {
			logger.error("Invalid from email address provided");
			return;
		}

    this.from = from;
  }

  /**
   * Get host.
   *
   * @return host as String.
   */
  public String getHost() {
    return host;
  }

  /**
   * Set host.
   *
   * @param host the value to set.
   */
  public void setHost(String host) {
    this.host = host;
  }

  /**
   * Get port.
   *
   * @return port as String.
   */
  public String getPort() {
    return port;
  }

  /**
   * Set port.
   *
   * @param port the value to set.
   */
  public void setPort(String port) {
    this.port = port;
  }

  /**
   * Get username.
   *
   * @return username as String.
   */
  public String getUsername() {
    return username;
  }

  /**
   * Set username.
   *
   * @param username the value to set.
   */
  public void setUsername(String username) {
    this.username = username;
  }

  /**
   * Get password.
   *
   * @return password as String.
   */
  public String getPassword() {
    return password;
  }

  /**
   * Set password.
   *
   * @param password the value to set.
   */
  public void setPassword(String password) {
    this.password = password;
  }

  /**
   * Get ssl.
   *
   * @return ssl as int.
   */
  public int getSsl() {
    return ssl;
  }

  /**
   * Set ssl.
   *
   * @param ssl the value to set.
   */
  public void setSsl(int ssl) {
    this.ssl = ssl;
  }

  /**
   * Get tls.
   *
   * @return tls as int.
   */
  public int getTls() {
    return tls;
  }

  /**
   * Set tls.
   *
   * @param tls the value to set.
   */
  public void setTls(int tls) {
    this.tls = tls;
  }
}
